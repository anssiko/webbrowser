TODO

* intro website: html5test.com (235+11 points)

* icons, application name

* Cursor navi: http://doc.qt.nokia.com/4.7/qml-keynavigation.html

* Use Mobility Sensors API rotate the view so that it will stays horizontal like water surface in a glass

* Implement Navigation history tree visualization

* Tabs

* chromeless mode via <meta> tag

--- webbrowser.qml

//    state: "orientation " + runtime.orientation

//    states: [

//        // in N900 QML Viewer ctrl+shift+r will force autorotation
//        // http://developer.qt.nokia.com/forums/viewthread/1937

//        State {
//            name: "orientation " + Orientation.Landscape
//            PropertyChanges { target: webBrowser; width: 800; height: 480; rotation: 0 }
//        },
//        State {
//            name: "orientation " + Orientation.Portrait
//            PropertyChanges { target:  webBrowser; width: 480; height: 800; rotation: -90 }
//        }
//    ]

---

// http://doc.qt.nokia.com/4.7-snapshot/qml-intro.html
// experimental rotation effect for e.g. settings

//    transform: Rotation {
//        id: rotate
//        // axis {x: 0; y: 1; z: 1}
//        origin.x: webBrowser.width/2; origin.y: webBrowser.height/2; axis {x: 0; y: 1; z: 0} angle: 0
//        NumberAnimation on angle {
//            running: true // true to enable, slowish
//            from: 0; to: 360;
//            duration: 10000;
//            loops: Animation.Infinite
//        }
//    }

--- Header.qml

/*
    Rectangle {
        id: tabContainer
        color: "green"
        width: 200; height: 60
        anchors { bottom: parent.bottom; left: parent.left; right: parent.right }

        Text {
            anchors.fill: parent; color: "white"; text: "First Tab"
        }

        MouseArea {
            anchors.fill: parent
            onClicked: createTab();

            // http://doc.qt.nokia.com/4.7-snapshot/qml-qt.html#createComponent-method
            // http://doc.qt.nokia.com/4.7-snapshot/qdeclarativedynamicobjects.html
            function createTab() {
                var component = Qt.createComponent("FlickableWebView.qml");
                if (component.status == Component.Ready) {
                    var tab = component.createObject(webView);
                    tab.url = "http://google.com";
                    tab.anchors.top = webView.top;
                    tab.anchors.left = webBrowser.left;
                    tab.anchors.right = parent.right;
                    tab.anchors.bottom = parent.bottom;
                }
            }
        }
    }
*/

--- FlickableWebView.qml

//    SequentialAnimation on x {
//        id: nextAnimation; running: false
//        PropertyAction { target: webView; property: "renderingEnabled"; value: false }
//        NumberAnimation { from: 0; to: -webBrowser.width; duration: 300; easing.type: Easing.InQuad }
//        NumberAnimation { from: webBrowser.width; to: 0; duration: 300; easing.type: Easing.OutQuad }
//        PropertyAction { target: webView; property: "renderingEnabled"; value: true }
//    }

//    SequentialAnimation on x {
//        id: backAnimation; running: false
//        PropertyAction { target: webView; property: "renderingEnabled"; value: false }
//        NumberAnimation { from: 0; to: webBrowser.width*2; duration: 300; easing.type: Easing.InQuad }
//        NumberAnimation { from: -webBrowser.width; to: 0; duration: 300; easing.type: Easing.OutQuad }
//        PropertyAction { target: webView; property: "renderingEnabled"; value: true }
//    }

// Alternative approach using states and transitions

//    states: [
//        State {
//            name: "left"
//            PropertyChanges { target: webView; x: -webBrowser.width }
//        },
//        State {
//            name: "center"
//            PropertyChanges { target: webView; x: 0 }
//        },
//        State {
//            name: "right"
//            PropertyChanges { target: webView; x: webBrowser.width }
//        }
//    ]

//    transitions: [
//        Transition {
//            PropertyAction { target: webView; property: "renderingEnabled"; value: false }
//            NumberAnimation { properties: "x"; duration: 500; easing.type: Easing.InOutQuad }
//            NumberAnimation { properties: "y"; duration: 100 }
//            PropertyAction { target: webView; property: "renderingEnabled"; value: true }
//        }
//    ]
